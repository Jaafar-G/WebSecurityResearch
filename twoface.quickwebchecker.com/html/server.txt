import java.io.*;
import java.net.*;
import java.lang.Thread;
import java.util.Random;
import java.util.Scanner;
public class DataSender extends Thread{
    public static void main(String[] args) throws IOException{
        if(args.length < 4){
            System.out.println("Incorrect usage. Use: java DataSender port_number count iteration rates");
            return;
        }
        int portNumber = Integer.parseInt(args[0]);
        int count = Integer.parseInt(args[1]);
        int iteration = Integer.parseInt(args[2]);
        int[] rates = new int[args.length - 3];
        int index = 0;
        for(int i = 3; i < args.length; i++){
            rates[index] = Integer.parseInt(args[i]);
            index++;
        }
        try(ServerSocket serverSocket = new ServerSocket(portNumber)){
            System.out.println("The DataSender server is running...");
            serverSocket.setReuseAddress(true);
            //the main thread accepts connections from the clients
            while(true){
                Socket clientSocket = serverSocket.accept();
                System.out.println("New Client Connected");
                ClientHandler client = new ClientHandler(clientSocket, count, iteration, rates);
                //Handle each Client Seperately
                new Thread(client).start();
            }
        } catch (IOException e) {
            System.out.println("Exception caught when trying to listen on port "
            + portNumber + " or listening for a connection");
            System.out.println(e.getMessage());
        } 
    }
    private static class ClientHandler implements Runnable{
        private final Socket socket;
        private int count;
        private int iteration;
        private int[] rates;
        public ClientHandler (Socket socket, int count, int iteration, int[] rates){
            this.socket = socket;
            this.count = count;
            this.iteration = iteration;
            this.rates = rates;
        }
        public void run(){
            try {
                System.out.println("Count: " + this.count);
                float second = 1000;
                PrintWriter out = new PrintWriter(this.socket.getOutputStream());
                Random random = new Random();
                for(int i = 0; i < count; i++){
                    for (int j = 0; j < 16; j++){
                        out.print(random.nextInt(100)+ " ");
                    }
                    out.println(" ");
                    out.flush();    
                    System.out.println("The second is " + second + "and rate is" + this.rates[0]  + (long)(second / this.rates[0]));
                    Thread.sleep((long)(second / this.rates[0]));               
                }
            } catch (Exception e) { 
                System.out.println("Error:" + socket);
            } finally {
                try { 
                    socket.close(); 
                } 
                catch (IOException e) {
                    System.out.println(e.getMessage());
                }
                System.out.println("Closed: " + socket);
            }
        }
    }
}